<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apply on Takahiro ONOSHIMA&#39;s website</title>
    <link>https://onoshima.github.io/tags/apply/</link>
    <description>Recent content in apply on Takahiro ONOSHIMA&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Takahiro ONOSHIMA</copyright>
    <lastBuildDate>Fri, 26 Jul 2019 13:47:56 +0900</lastBuildDate><atom:link href="https://onoshima.github.io/tags/apply/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rのlapply関数に関するメモ</title>
      <link>https://onoshima.github.io/posts/laaply/</link>
      <pubDate>Fri, 26 Jul 2019 13:47:56 +0900</pubDate>
      
      <guid>https://onoshima.github.io/posts/laaply/</guid>
      <description>lapplyおよびparallelパッケージのmclapplyについて調べた際の記録。
lapplyとは Rで同一の関数を複数のオブジェクトを対象に行うときには, forで繰り返しのループで書くよりも, apply()ファミリーを用いて並列的に処理したほうが早いと言われる。lapplyは, 与えられたリストに対して同一の関数を適用する。lapplyだと戻り値はリストで, sapplyだと戻り値はベクトルである。
例：異なる長さのベクトルの平均 実際に例を見てみると理解が早いかもしれない。長さが10, 100, 1000のベクトルからなるリストそれぞれの平均を求めるには次のように入力する。
x &amp;lt;- list(rnorm(10), rnorm(100), rnorm(1000)) lapply(x, mean) # 戻り値はリスト sapply(x, mean) # 戻り値はベクトル mclapplyとは lapplyではリストのそれぞれに並列の処理を行うことができることが分かったが, 複数のリストオブジェクトに対して並列的に処理を行いたいという場面もあるかもしれない。そうした際には&amp;rsquo;parallel&amp;rsquo;というパッケージの&amp;rsquo;mclapply&amp;rsquo;という関数が使えるらしい。
使い方は次のとおり。で繰り返す回数と, 処理する関数を指定するとよいようだ。
replist &amp;lt;- parallel::mclapply(1:1000, function(x){ replicates &amp;lt;- list(mean(rnorm(10)), mean(rnorm(100)),mean(rnorm(1000))) }) 戻り値はネストされたリストである。例えば, ネストされたリストを次のように行列の形に直せば, 異なるサンプルサイズにおける標本平均値のばらつきなども分かる。
replicates &amp;lt;- matrix(unlist(replist), 1000, 3, byrow=T) boxplot(replicates, names=c(&amp;#34;size10&amp;#34;, &amp;#34;size100&amp;#34;, &amp;#34;size1000&amp;#34;)) 速度の比較 本当にforのループよりも早いか調べてみる。今の処理を100,000回繰り返してみて速度を測ることにする。
t.loop &amp;lt;- proc.time() x &amp;lt;- list() for (i in 1:100000){ x[[i]] &amp;lt;- list(mean(rnorm(10)), mean(rnorm(100)), mean(rnorm(1000))) } t.loop &amp;lt;- proc.</description>
    </item>
    
  </channel>
</rss>
