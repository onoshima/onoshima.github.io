<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Takahiro ONOSHIMA&#39;s website</title>
    <link>https://onoshima.github.io/tags/r/</link>
    <description>Recent content in R on Takahiro ONOSHIMA&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Takahiro ONOSHIMA</copyright>
    <lastBuildDate>Fri, 26 Jul 2019 13:47:56 +0900</lastBuildDate><atom:link href="https://onoshima.github.io/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rのlapply関数に関するメモ</title>
      <link>https://onoshima.github.io/posts/laaply/</link>
      <pubDate>Fri, 26 Jul 2019 13:47:56 +0900</pubDate>
      
      <guid>https://onoshima.github.io/posts/laaply/</guid>
      <description>lapplyおよびparallelパッケージのmclapplyについて調べた際の記録。
lapplyとは Rで同一の関数を複数のオブジェクトを対象に行うときには, forで繰り返しのループで書くよりも, apply()ファミリーを用いて並列的に処理したほうが早いと言われる。lapplyは, 与えられたリストに対して同一の関数を適用する。lapplyだと戻り値はリストで, sapplyだと戻り値はベクトルである。
例：異なる長さのベクトルの平均 実際に例を見てみると理解が早いかもしれない。長さが10, 100, 1000のベクトルからなるリストそれぞれの平均を求めるには次のように入力する。
x &amp;lt;- list(rnorm(10), rnorm(100), rnorm(1000)) lapply(x, mean) # 戻り値はリスト sapply(x, mean) # 戻り値はベクトル mclapplyとは lapplyではリストのそれぞれに並列の処理を行うことができることが分かったが, 複数のリストオブジェクトに対して並列的に処理を行いたいという場面もあるかもしれない。そうした際には&amp;rsquo;parallel&amp;rsquo;というパッケージの&amp;rsquo;mclapply&amp;rsquo;という関数が使えるらしい。
使い方は次のとおり。で繰り返す回数と, 処理する関数を指定するとよいようだ。
replist &amp;lt;- parallel::mclapply(1:1000, function(x){ replicates &amp;lt;- list(mean(rnorm(10)), mean(rnorm(100)),mean(rnorm(1000))) }) 戻り値はネストされたリストである。例えば, ネストされたリストを次のように行列の形に直せば, 異なるサンプルサイズにおける標本平均値のばらつきなども分かる。
replicates &amp;lt;- matrix(unlist(replist), 1000, 3, byrow=T) boxplot(replicates, names=c(&amp;#34;size10&amp;#34;, &amp;#34;size100&amp;#34;, &amp;#34;size1000&amp;#34;)) 速度の比較 本当にforのループよりも早いか調べてみる。今の処理を100,000回繰り返してみて速度を測ることにする。
t.loop &amp;lt;- proc.time() x &amp;lt;- list() for (i in 1:100000){ x[[i]] &amp;lt;- list(mean(rnorm(10)), mean(rnorm(100)), mean(rnorm(1000))) } t.loop &amp;lt;- proc.</description>
    </item>
    
    <item>
      <title>ブートストラップについての調べもの</title>
      <link>https://onoshima.github.io/posts/boot/</link>
      <pubDate>Wed, 03 Jul 2019 07:10:40 +0900</pubDate>
      
      <guid>https://onoshima.github.io/posts/boot/</guid>
      <description>Rでブートストラップについて調べたときの記録。
ブートストラップとは 大雑把に言えば, 統計量とかの分布を調べたりするために1つの標本から新しい標本（ブートストラップ標本）を何個も作ることのようだ。パラメトリックとノンパラメトリックがある。
今回扱うのはノンパラメトリックの方。
自作関数によるブートストラップ ブートストラップ標本を作るときには, もとの標本から同じサイズで復元抽出を行う。復元抽出とは要するに, くじ引きでくじを引くたびにもとの箱にくじを戻すことである。たとえば, 【太郎さん、花子さん、和夫さん】の3人からなるもとの標本があった場合に, あるブートストラップ標本では【太郎さん, 太郎さん, 花子さん】になるかもしれないし, 別のブートストラップ標本では【和夫さん, 和夫さん, 和夫さん】となるかもしれない。Rで復元抽出を行う際にはsamaple()関数の引数でreplace=TRUEを指定すると良い。試しにやってみる。Rの組み込みのデータセットであるstateからアメリカ50州の収入のデータを使って, 平均値と中央値がどのように分布するかを見てみる。
# もとの標本 original &amp;lt;- state.x77[,&amp;#34;Income&amp;#34;] # 元の標本から復元抽出する回数 num.bs.sample &amp;lt;- 1000 # 結果を保存するようベクトル median.vector &amp;lt;- numeric(num.bs.sample) mean.vector &amp;lt;- numeric(num.bs.sample) for (i in 1:num.bs.sample){ median.vector[i] &amp;lt;- median(sample(original, length(original), replace=TRUE)) mean.vector[i] &amp;lt;- mean(sample(original, length(original), replace=T)) } # 結果の図示 boxplot(median.vector, mean.vector, names=c(&amp;#34;Median&amp;#34;,&amp;#34;Mean&amp;#34;), horizontal = T, las=T, xlab=&amp;#34;Income&amp;#34;) 結果は次のとおりである。これを使うと中央値の経験的な分布なども求められる。
bootパッケージによるブートストラップ 毎回, 自分で繰り返しのループを書くのも面倒であろうということでbootという便利なパッケージがある。boot(もとの標本, 統計量を求める関数, ブートストラップ標本数)のように使う使うらしい。同じデータでやってみよう。
library(boot) foo &amp;lt;- function(d,k){ median.</description>
    </item>
    
    <item>
      <title>tidyrを使ったデータの整理</title>
      <link>https://onoshima.github.io/posts/filter/</link>
      <pubDate>Tue, 25 Jun 2019 16:38:21 +0900</pubDate>
      
      <guid>https://onoshima.github.io/posts/filter/</guid>
      <description>データ整理にtidyverseを使った際の覚書。まずデータフレームをas_tibble()でtidy用の形式にする。
library(tidyverse) air &amp;lt;- airquality tidy.air &amp;lt;- as_tibble(air) 条件に合うケースの抽出 filter()関数を使うと良いらしい。
## 条件に合う行を抽出 air.May &amp;lt;- tidy.air %&amp;gt;% filter(Month==5) #5月のデータのみ取り出す Ozone.mean &amp;lt;- mean(air$Ozone, na.rm=T) air.high.Ozone &amp;lt;- tidy.air %&amp;gt;% # オゾンが平均より高いケースを取り出す filter(Ozone &amp;gt; Ozone.mean) air.high.Ozone.May &amp;lt;- tidy.air %&amp;gt;% #複合条件もOK filter(Ozone &amp;gt; Ozone.mean, Month==5) 抽出されたケースを見ると, オゾンの値が平均（43くらい）よりも高いケースのみのデータセットが出来上がっている。</description>
    </item>
    
    <item>
      <title>テトラコリック相関係数を求める関数の自作</title>
      <link>https://onoshima.github.io/posts/190619tetra/</link>
      <pubDate>Wed, 19 Jun 2019 21:59:21 +0900</pubDate>
      
      <guid>https://onoshima.github.io/posts/190619tetra/</guid>
      <description>先日テトラコリック相関係数を求める方法についての記事を書いた。
テトラコリック相関の初期
それに基づいてRでテトラコリック相関係数を求める関数を自作した。
Rでの関数化 作った関数は以下の通り。引数には2×2の相関表を指定する。途中のテトラコリック関数（？）で何次まで計算するかということをorder=という引数で指定する。デフォルトは論文に掲載されていたものと同じ6にしてある。
tetrachoric &amp;lt;- function(cor.table, order=6){ #必要な数値を代入 N &amp;lt;- sum(cor.table) prop.bd &amp;lt;- colSums(prop.table(cor.table))[2] prop.cd &amp;lt;- rowSums(prop.table(cor.table))[2] h &amp;lt;- qnorm(prop.bd, lower.tail = F) H &amp;lt;- dnorm(h) k &amp;lt;- qnorm(prop.cd, lower.tail = F) K &amp;lt;- dnorm(k) tau &amp;lt;- numeric(order) theta &amp;lt;- numeric(order) v_bar &amp;lt;- numeric(order) w_bar &amp;lt;- numeric(order) #テトラコリック関数 for(n in 1:order){ if(n==1){ v_bar[n] &amp;lt;- h w_bar[n] &amp;lt;- k tau[n] &amp;lt;- H theta[n] &amp;lt;- K } else if (n==2){ v_bar[n] &amp;lt;- h^2-1 w_bar[n] &amp;lt;- k^2-1 tau[n] &amp;lt;- H*h/sqrt(2) theta[n] &amp;lt;- K*k/sqrt(2) } else { v_bar[n] &amp;lt;- h * v_bar[n-1] - (n-1) * v_bar[n-2] w_bar[n] &amp;lt;- k * w_bar[n-1] - (n-1) * w_bar[n-2] tau[n] &amp;lt;- H*v_bar[n-1]/sqrt(factorial(n)) theta[n] &amp;lt;- K*w_bar[n-1]/sqrt(factorial(n)) } } # 相関を計算 coef_vec &amp;lt;- c(prop.</description>
    </item>
    
  </channel>
</rss>
