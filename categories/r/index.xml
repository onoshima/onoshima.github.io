<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Takahiro Onoshima&#39;s website | 小野島昂洋のページ</title>
    <link>https://onoshima.github.io/categories/r/</link>
    <description>Recent content in R on Takahiro Onoshima&#39;s website | 小野島昂洋のページ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright> &amp;copy; 2019 Takahiro Onoshima</copyright>
    <lastBuildDate>Sat, 21 Dec 2019 16:12:33 +0900</lastBuildDate>
    
	<atom:link href="https://onoshima.github.io/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2群のプリポストデータに関して</title>
      <link>https://onoshima.github.io/stat/prepost/</link>
      <pubDate>Sat, 21 Dec 2019 16:12:33 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/prepost/</guid>
      <description>2群のプリポストデータ 理由はよくわからないのだけれど, 知り合いから2群のプリポストデータの分析について聞かれることが多い。何かしらの介入の効果を検討したいらしく、統制群と介入群の2つに分けて, それぞれの群で介入前と介入後のデータを取るみたいな状況を想定しているようだ。 こうした場合に適切な分析手法については吉田（2006）が論じており, （1）ポスト-プリの差得点を取り, その差得点（変化量）を従属変数</description>
    </item>
    
    <item>
      <title>Rのlapply関数に関するメモ</title>
      <link>https://onoshima.github.io/stat/laaply/</link>
      <pubDate>Fri, 26 Jul 2019 13:47:56 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/laaply/</guid>
      <description>lapplyおよびparallelパッケージのmclapplyについて調べた際の記録。 lapplyとは Rで同一の関数を複数のオブジェクトを対象に行うときには, forで繰り返しのループで書くよりも, apply()ファミリーを用いて並列的に処理したほうが早いと言われる。lapplyは, 与えられたリストに対して同一の関数を適用する。lapplyだと戻り値はリストで, sapplyだと戻り値はベクトルである</description>
    </item>
    
    <item>
      <title>ブートストラップについての調べもの</title>
      <link>https://onoshima.github.io/stat/boot/</link>
      <pubDate>Wed, 03 Jul 2019 07:10:40 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/boot/</guid>
      <description>Rでブートストラップについて調べたときの記録。 ブートストラップとは 大雑把に言えば, 統計量とかの分布を調べたりするために一つの標本から新しい標本（ブートストラップ標本）を何個も作ることのようだ。パラメトリックとノンパラメトリックがある。 今回扱うのはノンパラメトリックの方。 自作関数によるブートストラップ ブートストラップ標本を作るときには, もとの標本から同じサイズで復元抽出を行う。復元抽出とは要するに,</description>
    </item>
    
    <item>
      <title>tidyrを使ったデータの整理</title>
      <link>https://onoshima.github.io/stat/filter/</link>
      <pubDate>Tue, 25 Jun 2019 16:38:21 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/filter/</guid>
      <description>データ整理にtidyverseを使った際の覚書。まずデータフレームをas_tibble()でtidy用の形式にする。 library(tidyverse) air &amp;lt;- airquality tidy.air &amp;lt;- as_tibble(air) 条件に合うケースの抽出 filter()関数を使うと良いらしい。 ## 条件に合う行を抽出 air.May &amp;lt;- tidy.air %&amp;gt;% filter(Month==5) #5月のデータのみ取り出す Ozone.mean &amp;lt;- mean(air$Ozone, na.rm=T) air.high.Ozone &amp;lt;- tidy.air %&amp;gt;% # オゾンが平均より高いケースを取り出す filter(Ozone &amp;gt; Ozone.mean) air.high.Ozone.May &amp;lt;- tidy.air %&amp;gt;% #複合条件もOK filter(Ozone &amp;gt; Ozone.mean, Month==5) 抽出されたケースを見ると, オゾンの値が平均（43くらい）より</description>
    </item>
    
  </channel>
</rss>