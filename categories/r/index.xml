<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Takahiro Onoshima&#39;s website | 小野島昂洋のページ</title>
    <link>https://onoshima.github.io/categories/r/</link>
    <description>Recent content in R on Takahiro Onoshima&#39;s website | 小野島昂洋のページ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright> &amp;copy; 2019 Takahiro Onoshima</copyright>
    <lastBuildDate>Sat, 25 Jan 2020 14:04:09 +0900</lastBuildDate>
    
	<atom:link href="https://onoshima.github.io/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RstudioでGithubの鍵認証設定</title>
      <link>https://onoshima.github.io/stat/rstudiogithub/</link>
      <pubDate>Sat, 25 Jan 2020 14:04:09 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/rstudiogithub/</guid>
      <description>R studioの鍵認証についての備忘録。またやることになったらおそらく忘れるので。 やったこと RstudioのToos &amp;gt; Global Option &amp;gt; Git/SVNでView public keyをクリック 表示される公開鍵をコピー Githubの自分のページ &amp;gt; Settings &amp;gt; SSH and GPG keysから右上のNew SSH kayというボタンをクリック 適当な名前をつけて先ほどの公開鍵をペースト 参考にしたもの http://dragstar.hatenablog.com/entry/2016/04/26/185546</description>
    </item>
    
    <item>
      <title>ggplot2でpdfを出力する</title>
      <link>https://onoshima.github.io/stat/ggplot2japanese/</link>
      <pubDate>Sun, 12 Jan 2020 23:12:22 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/ggplot2japanese/</guid>
      <description>ggplot2でpdf出力 # ggplot2 pdf出力 library(tidyverse) dat &amp;lt;- as_tibble(iris) dat_long &amp;lt;- dat %&amp;gt;% gather(key=&amp;#34;part&amp;#34;, value=&amp;#34;value&amp;#34;,-Species) %&amp;gt;% mutate(part = as.factor(part)) p &amp;lt;- ggplot(dat_long, aes(x=Species, y=value, fill=Species)) + geom_boxplot() + facet_wrap(~part) # pdfに出力 pdf(&amp;#34;figure/iris.pdf&amp;#34;, width=7, height=7) print(p) dev.off() ※ 画像web表示のためにpng形式. 日本語ファイルを出力 pdfで使うフォントを指定してやるとよい. pdfで何のフォントが使えるかを知りたい時はnames(pdfFonts())とか打つと良い. # 日本語を使う p1 &amp;lt;- p + ggtitle(&amp;#34;日本語タイトル&amp;#34;) + theme(plot.title=element_text(family=&amp;#34;Japan1GothicBBB&amp;#34;)) pdf(&amp;#34;figure/iris_ja.pdf&amp;#34;, width=7, height=7) print(p1) dev.off() ※ 画像w</description>
    </item>
    
    <item>
      <title>相関係数行列からクロンバックのαを求める</title>
      <link>https://onoshima.github.io/stat/cronbach/</link>
      <pubDate>Fri, 27 Dec 2019 21:37:22 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/cronbach/</guid>
      <description>尺度の作成論文などでは信頼性係数が報告される。信頼性係数には様々な種類があるが, その中でもっともよく使われるのがクロンバックのαである。クロンバックのαは次の計算式で求められる。 $$ a = \frac{n}{n-1} \left( 1- \frac{\Sigma^n _{i=1}Var(X_i)}{Var(X)}\right) \tag{1} $$ ここで, $n$は項目数, $X_i$は$i$番目の項目の得点である。$X$はテストの合計得点である。 Rでクロンバックのαの求めるには Rでクロンバックのαを求めるためには複数のやり方がある。 http://www.okadajp.org/RWiki/?%CE%B1%E4%BF%82%E6%95%B0%EF%BC%8C%E4%BF%A1%E9%A0%BC%E6%80%A7%E4%BF%82%E6%95%B0%E3%81%AE%E7%AE%97%E5%87%BA とりあえずここ</description>
    </item>
    
    <item>
      <title>2群のプリポストデータに関して</title>
      <link>https://onoshima.github.io/stat/prepost/</link>
      <pubDate>Sat, 21 Dec 2019 16:12:33 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/prepost/</guid>
      <description>2群のプリポストデータ 理由はよくわからないのだけれど, 知り合いから2群のプリポストデータの分析について聞かれることが多い。何かしらの介入の効果を検討したいらしく、統制群と介入群の2つに分けて, それぞれの群で介入前と介入後のデータを取るみたいな状況を想定しているようだ。 こうした場合に適切な分析手法については吉田（2006）が論じており, （1）ポスト-プリの差得点を取り, その差得点（変化量）を従属変数</description>
    </item>
    
    <item>
      <title>Rのlapply関数に関するメモ</title>
      <link>https://onoshima.github.io/stat/laaply/</link>
      <pubDate>Fri, 26 Jul 2019 13:47:56 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/laaply/</guid>
      <description>lapplyおよびparallelパッケージのmclapplyについて調べた際の記録。 lapplyとは Rで同一の関数を複数のオブジェクトを対象に行うときには, forで繰り返しのループで書くよりも, apply()ファミリーを用いて並列的に処理したほうが早いと言われる。lapplyは, 与えられたリストに対して同一の関数を適用する。lapplyだと戻り値はリストで, sapplyだと戻り値はベクトルである</description>
    </item>
    
    <item>
      <title>ブートストラップについての調べもの</title>
      <link>https://onoshima.github.io/stat/boot/</link>
      <pubDate>Wed, 03 Jul 2019 07:10:40 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/boot/</guid>
      <description>Rでブートストラップについて調べたときの記録。 ブートストラップとは 大雑把に言えば, 統計量とかの分布を調べたりするために一つの標本から新しい標本（ブートストラップ標本）を何個も作ることのようだ。パラメトリックとノンパラメトリックがある。 今回扱うのはノンパラメトリックの方。 自作関数によるブートストラップ ブートストラップ標本を作るときには, もとの標本から同じサイズで復元抽出を行う。復元抽出とは要するに,</description>
    </item>
    
    <item>
      <title>tidyrを使ったデータの整理</title>
      <link>https://onoshima.github.io/stat/filter/</link>
      <pubDate>Tue, 25 Jun 2019 16:38:21 +0900</pubDate>
      
      <guid>https://onoshima.github.io/stat/filter/</guid>
      <description>データ整理にtidyverseを使った際の覚書。まずデータフレームをas_tibble()でtidy用の形式にする。 library(tidyverse) air &amp;lt;- airquality tidy.air &amp;lt;- as_tibble(air) 条件に合うケースの抽出 filter()関数を使うと良いらしい。 ## 条件に合う行を抽出 air.May &amp;lt;- tidy.air %&amp;gt;% filter(Month==5) #5月のデータのみ取り出す Ozone.mean &amp;lt;- mean(air$Ozone, na.rm=T) air.high.Ozone &amp;lt;- tidy.air %&amp;gt;% # オゾンが平均より高いケースを取り出す filter(Ozone &amp;gt; Ozone.mean) air.high.Ozone.May &amp;lt;- tidy.air %&amp;gt;% #複合条件もOK filter(Ozone &amp;gt; Ozone.mean, Month==5) 抽出されたケースを見ると, オゾンの値が平均（43くらい）より</description>
    </item>
    
  </channel>
</rss>